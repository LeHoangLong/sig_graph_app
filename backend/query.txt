# Welcome to GraphiQL
#
# GraphiQL is an in-browser tool for writing, validating, and
# testing GraphQL queries.
#
# Type queries into this side of the screen, and you will see intelligent
# typeaheads aware of the current GraphQL type schema and live syntax and
# validation errors highlighted within the text.
#
# GraphQL queries typically start with a "{" character. Lines that start
# with a # are ignored.
#
# An example GraphQL query might look like:
#
#     {
#       field(arg: "value") {
#         subField
#       }
#     }
#
# Keyboard shortcuts:
#
#  Prettify Query:  Shift-Ctrl-P (or press the prettify button above)
#
#     Merge Query:  Shift-Ctrl-M (or press the merge button above)
#
#       Run Query:  Ctrl-Enter (or press the play button above)
#
#   Auto Complete:  Ctrl-Space (or just start typing)
#
mutation {
  createMaterial(
    name: "a",
    unit: "d",
		quantity: "3"
  ) {
    Id,
    Name
	  Quantity
    NodeId
 }
}

query {
  materialByNodeId(nodeId: "peer_0/923851f3-dd54-4721-bc28-0f83ff9e0abe") {
    Id,
    Name,
    Unit,
    Quantity
  }
}

query {
  materials {
    Id
    Name
    Unit
    Quantity
  }
  peers {
    Id,
    Alias,
    PublicKeys {
      Id,
    	 Value,
    }
  }
}


mutation {
  transferMaterial(
    materialId: 0,
		peerPublicKeyId: 2,
    relatedMaterialsId: [],
  ) {
    Accepted
    Request {
      TransferMaterial {
        Id,
        NodeId,
        Name,
        Unit,
        Quantity,
        CreatedTime,
      },
      ExposedMaterials {
        Id,
        NodeId,
        Name,
        Unit,
        Quantity,
        CreatedTime,
      },
      TransferTime
    }
  }
}

query {
  receivedTransferMaterialRequests(status: [PENDING]) {
      Id,
      TransferMaterial {
        Id,
        NodeId,
        Name,
        Unit,
        Quantity,
        CreatedTime,
      },
      ExposedMaterials {
        Id,
        NodeId,
        Name,
        Unit,
        Quantity,
        CreatedTime,
      },
      TransferTime,
  		SenderPublicKeyId,
  }
}