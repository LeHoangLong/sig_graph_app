// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MaterialServiceClient is the client API for MaterialService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MaterialServiceClient interface {
	SendReceiveMaterialRequest(ctx context.Context, in *ReceiveMaterialRequestRequest, opts ...grpc.CallOption) (*ReceiveMaterialRequestResponse, error)
	SendReceiveMaterialResponse(ctx context.Context, in *ReceiveMaterialResponseRequest, opts ...grpc.CallOption) (*ReceiveMaterialResponseResponse, error)
}

type materialServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMaterialServiceClient(cc grpc.ClientConnInterface) MaterialServiceClient {
	return &materialServiceClient{cc}
}

func (c *materialServiceClient) SendReceiveMaterialRequest(ctx context.Context, in *ReceiveMaterialRequestRequest, opts ...grpc.CallOption) (*ReceiveMaterialRequestResponse, error) {
	out := new(ReceiveMaterialRequestResponse)
	err := c.cc.Invoke(ctx, "/grpc.MaterialService/SendReceiveMaterialRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *materialServiceClient) SendReceiveMaterialResponse(ctx context.Context, in *ReceiveMaterialResponseRequest, opts ...grpc.CallOption) (*ReceiveMaterialResponseResponse, error) {
	out := new(ReceiveMaterialResponseResponse)
	err := c.cc.Invoke(ctx, "/grpc.MaterialService/SendReceiveMaterialResponse", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MaterialServiceServer is the server API for MaterialService service.
// All implementations must embed UnimplementedMaterialServiceServer
// for forward compatibility
type MaterialServiceServer interface {
	SendReceiveMaterialRequest(context.Context, *ReceiveMaterialRequestRequest) (*ReceiveMaterialRequestResponse, error)
	SendReceiveMaterialResponse(context.Context, *ReceiveMaterialResponseRequest) (*ReceiveMaterialResponseResponse, error)
	mustEmbedUnimplementedMaterialServiceServer()
}

// UnimplementedMaterialServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMaterialServiceServer struct {
}

func (UnimplementedMaterialServiceServer) SendReceiveMaterialRequest(context.Context, *ReceiveMaterialRequestRequest) (*ReceiveMaterialRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendReceiveMaterialRequest not implemented")
}
func (UnimplementedMaterialServiceServer) SendReceiveMaterialResponse(context.Context, *ReceiveMaterialResponseRequest) (*ReceiveMaterialResponseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendReceiveMaterialResponse not implemented")
}
func (UnimplementedMaterialServiceServer) mustEmbedUnimplementedMaterialServiceServer() {}

// UnsafeMaterialServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MaterialServiceServer will
// result in compilation errors.
type UnsafeMaterialServiceServer interface {
	mustEmbedUnimplementedMaterialServiceServer()
}

func RegisterMaterialServiceServer(s grpc.ServiceRegistrar, srv MaterialServiceServer) {
	s.RegisterService(&MaterialService_ServiceDesc, srv)
}

func _MaterialService_SendReceiveMaterialRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReceiveMaterialRequestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MaterialServiceServer).SendReceiveMaterialRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.MaterialService/SendReceiveMaterialRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MaterialServiceServer).SendReceiveMaterialRequest(ctx, req.(*ReceiveMaterialRequestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MaterialService_SendReceiveMaterialResponse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReceiveMaterialResponseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MaterialServiceServer).SendReceiveMaterialResponse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.MaterialService/SendReceiveMaterialResponse",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MaterialServiceServer).SendReceiveMaterialResponse(ctx, req.(*ReceiveMaterialResponseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MaterialService_ServiceDesc is the grpc.ServiceDesc for MaterialService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MaterialService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpc.MaterialService",
	HandlerType: (*MaterialServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendReceiveMaterialRequest",
			Handler:    _MaterialService_SendReceiveMaterialRequest_Handler,
		},
		{
			MethodName: "SendReceiveMaterialResponse",
			Handler:    _MaterialService_SendReceiveMaterialResponse_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "grpc/material.proto",
}
