// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//+build !wireinject

package main

import (
	"backend/internal/controllers"
	"backend/internal/drivers"
	"backend/internal/repositories"
	"backend/internal/services"
	"backend/internal/services/graph_id"
	"backend/internal/services/material_contract"
	"backend/internal/services/node_contract"
	"database/sql"
	"fmt"
	"github.com/google/wire"
	"github.com/hyperledger/fabric-sdk-go/pkg/client/msp"
	"github.com/hyperledger/fabric-sdk-go/pkg/gateway"
	"gopkg.in/yaml.v3"
	"os"
)

import (
	_ "github.com/lib/pq"
)

// Injectors from wire.go:

func InitializeHLClientProvider() drivers.HLClientProvider {
	configFilePath := NewConfigFilePath()
	hlClientProvider := MakeHLClientProvider(configFilePath)
	return hlClientProvider
}

func InitializeHLIdentityService() drivers.HLIdentityService {
	client := InitializeHLClient()
	hlIdentityService := drivers.MakeHLIdentityService(client)
	return hlIdentityService
}

func InitializeHLGatewayInitializer() drivers.HLGatewayInitializer {
	wallet := InitializeWallet()
	configFilePath := NewConfigFilePath()
	walletIdentity := NewWalletIdentity()
	hlIdentityService := InitializeHLIdentityService()
	mspId := NewMspId()
	hlGatewayInitializer := drivers.MakeHLGatewayInitializer(wallet, configFilePath, walletIdentity, hlIdentityService, mspId)
	return hlGatewayInitializer
}

func InitializeIdHasher() node_contract.IdHasher {
	idHasher := node_contract.MakeIdHasher()
	return idHasher
}

func InitializeNodeRepositorySql() repositories.NodeRepositorySql {
	sqlDB := InitializeSqlDriver()
	idHasher := InitializeIdHasher()
	nodeRepositorySql := repositories.MakeNodeRepositorySql(sqlDB, idHasher)
	return nodeRepositorySql
}

func InitializeMaterialRepository() repositories.MaterialRepositorySql {
	sqlDB := InitializeSqlDriver()
	nodeRepositorySql := InitializeNodeRepositorySql()
	materialRepositorySql := repositories.MakeMaterialRepositorySql(sqlDB, nodeRepositorySql)
	return materialRepositorySql
}

func InitializeMaterialRepositorySqlFactory() repositories.MaterialRepositoryFactory {
	sqlDB := InitializeSqlDriver()
	idHasher := InitializeIdHasher()
	materialRepositoryFactory := repositories.MakeMaterialRepositoryFactory(sqlDB, idHasher)
	return materialRepositoryFactory
}

func InitializePeerRepositorySql() repositories.PeerRepositorySql {
	sqlDB := InitializeSqlDriver()
	peerRepositorySql := repositories.MakePeerRepositorySql(sqlDB)
	return peerRepositorySql
}

func InitializePeerController() controllers.PeersController {
	peerRepositorySql := InitializePeerRepositorySql()
	peersController := controllers.MakePeersController(peerRepositorySql)
	return peersController
}

func InitializeUserKeyRepositorySql() repositories.UserKeyRepositorySql {
	sqlDB := InitializeSqlDriver()
	userKeyRepositorySql := repositories.MakeUserKeyRepositorySql(sqlDB)
	return userKeyRepositorySql
}

func InitializePeerKeyRepositorySql() repositories.PeerKeyRepositorySql {
	sqlDB := InitializeSqlDriver()
	peerKeyRepositorySql := repositories.MakePeerKeyRepositorySql(sqlDB)
	return peerKeyRepositorySql
}

func InitializeIdGeneratorService() graph_id_service.IdGeneratorServiceUuid {
	idGeneratorServiceUuidPrefix := InitializeIdGeneratorServiceUuidPrefix()
	idGeneratorServiceUuid := graph_id_service.MakeIdGeneratorServiceUuid(idGeneratorServiceUuidPrefix)
	return idGeneratorServiceUuid
}

func InitializeMaterialContractServiceFactory() material_contract_service.MaterialServiceFactory {
	hlGatewayInitializer := InitializeHLGatewayInitializer()
	channelName := InitializeChannelName()
	contractName := InitializeContractName()
	smartContractDriverHL := drivers.MakeSmartContractDriverHL(hlGatewayInitializer, channelName, contractName)
	idGeneratorServiceUuid := InitializeIdGeneratorService()
	materialServiceFactory := material_contract_service.MakeMaterialServiceFactory(smartContractDriverHL, idGeneratorServiceUuid)
	return materialServiceFactory
}

func InitializeMaterialRepositoryService() services.MaterialRepositoryService {
	materialRepositoryFactory := InitializeMaterialRepositorySqlFactory()
	userKeyRepositorySql := InitializeUserKeyRepositorySql()
	materialRepositorySql := InitializeMaterialRepository()
	idHasher := InitializeIdHasher()
	materialRepositoryService := services.MakeMaterialRepositoryService(materialRepositoryFactory, userKeyRepositorySql, materialRepositorySql, idHasher)
	return materialRepositoryService
}

func InitializeMaterialContractController() controllers.MaterialContractController {
	materialServiceFactory := InitializeMaterialContractServiceFactory()
	materialRepositoryService := InitializeMaterialRepositoryService()
	userKeyRepositorySql := InitializeUserKeyRepositorySql()
	peerKeyRepositorySql := InitializePeerKeyRepositorySql()
	materialContractController := controllers.MakeMaterialContractController(materialServiceFactory, materialRepositoryService, userKeyRepositorySql, peerKeyRepositorySql)
	return materialContractController
}

// wire.go:

type Config struct {
	WalletPath       string `yaml:"WalletPath"`
	HLConfigPath     string `yaml:"HLConfigPath"`
	HLWalletIdentity string `yaml:"HLWalletIdentity"`
	PublicKeyPath    string `yaml:"PublicKeyPath"`
	PrivateKeyPath   string `yaml:"PrivateKeyPath"`
	ChannelName      string `yaml:"ChannelName"`
	ContractName     string `yaml:"ContractName"`
	OrgMspId         string `yaml:"OrgMspId"`
	DbUser           string `yaml:"DbUser"`
	DbName           string `yaml:"DbName"`
	DbPassword       string `yaml:"DbPassword"`
	DbHost           string `yaml:"DbHost"`
	DbPort           string `yaml:"DbPort"`
	DbSslmode        string `yaml:"DbSslmode"`
	GraphIdPrefix    string `yaml:"GraphIdPrefix"`
}

func InitConfig() Config {
	configYaml, err := os.ReadFile("config.yaml")
	if err != nil {
		panic(fmt.Sprintf("Could not read config.yaml file %s", err.Error()))
	}

	var config Config
	err = yaml.Unmarshal(configYaml, &config)
	if err != nil {
		panic(fmt.Sprintf("Could not parse yaml file %s", err.Error()))
	}

	return config
}

func InitializeWallet() *gateway.Wallet {
	config := InitConfig()
	wallet, err := gateway.NewFileSystemWallet(config.WalletPath)
	if err != nil {
		panic(fmt.Sprintf("Could not create wallet %s", err.Error()))
	}
	return wallet
}

func NewConfigFilePath() drivers.ConfigFilePath {
	config := InitConfig()
	return drivers.ConfigFilePath(config.HLConfigPath)
}

func NewWalletIdentity() drivers.WalletIdentity {
	config := InitConfig()
	return drivers.WalletIdentity(config.HLWalletIdentity)
}

func MakeHLClientProvider(
	iConfigFilePath drivers.ConfigFilePath,
) drivers.HLClientProvider {
	provider, err := drivers.MakeHLChannelProvider(iConfigFilePath)
	if err != nil {
		panic(fmt.Sprintf("Could not initialize HL client provider %s", err.Error()))
	}

	return provider
}

func InitializeHLClient() *msp.Client {

	return nil
}

func NewMspId() drivers.MspId {
	config := InitConfig()
	return drivers.MspId(config.OrgMspId)
}

func InitializeChannelName() drivers.ChannelName {
	config := InitConfig()
	return drivers.ChannelName(config.ChannelName)
}

func InitializeContractName() drivers.ContractName {
	config := InitConfig()
	return drivers.ContractName(config.ContractName)
}

var SmartContractDriverSet = wire.NewSet(drivers.MakeSmartContractDriverHL, wire.Bind(new(drivers.SmartContractDriverI), new(drivers.SmartContractDriverHL)), InitializeHLGatewayInitializer,
	InitializeChannelName,
	InitializeContractName,
)

/// Initialize repositories
var db *sql.DB = nil

func InitializeSqlDriver() *sql.DB {
	if db == nil {
		var err error
		config := InitConfig()
		connStr := ""
		connStr += " user=" + config.DbUser
		connStr += " dbname=" + config.DbName
		connStr += " password=" + config.DbPassword
		connStr += " host=" + config.DbHost
		connStr += " sslmode=" + config.DbSslmode
		db, err = sql.Open("postgres", connStr)
		if err != nil {
			panic("could not connect to database")
		}
	}
	return db
}

var IdHasherSet = wire.NewSet(
	InitializeIdHasher, wire.Bind(new(node_contract.IdHasherI), new(node_contract.IdHasher)),
)

var NodeRepositorySet = wire.NewSet(
	InitializeNodeRepositorySql, wire.Bind(new(repositories.NodeRepositoryI), new(repositories.NodeRepositorySql)),
)

var MaterialRepositorySet = wire.NewSet(
	InitializeMaterialRepository, wire.Bind(new(repositories.MaterialRepositoryI), new(repositories.MaterialRepositorySql)),
)

var PeerSet = wire.NewSet(
	InitializePeerRepositorySql, wire.Bind(new(repositories.PeerRepositoryI), new(repositories.PeerRepositorySql)),
)

var UserKeySet = wire.NewSet(
	InitializeUserKeyRepositorySql, wire.Bind(new(repositories.UserKeyRepositoryI), new(repositories.UserKeyRepositorySql)),
)

var PeerKeySet = wire.NewSet(
	InitializePeerKeyRepositorySql, wire.Bind(new(repositories.PeerKeyRepositoryI), new(repositories.PeerKeyRepositorySql)),
)

/// Finished initializing repositories
func InitializeIdGeneratorServiceUuidPrefix() graph_id_service.IdGeneratorServiceUuidPrefix {
	config := InitConfig()
	return graph_id_service.IdGeneratorServiceUuidPrefix(config.GraphIdPrefix)
}

var IdGeneratorServiceSet = wire.NewSet(
	InitializeIdGeneratorService, wire.Bind(new(graph_id_service.IdGeneratorServiceI), new(graph_id_service.IdGeneratorServiceUuid)),
)
