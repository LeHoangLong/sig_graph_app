// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//+build !wireinject

package main

import (
	"backend/internal/controllers"
	"backend/internal/drivers"
	"backend/internal/repositories"
	"backend/internal/services"
	"database/sql"
	"fmt"
	"github.com/google/wire"
	"github.com/hyperledger/fabric-sdk-go/pkg/client/msp"
	"github.com/hyperledger/fabric-sdk-go/pkg/gateway"
	"gopkg.in/yaml.v3"
	"os"
)

import (
	_ "github.com/lib/pq"
)

// Injectors from wire.go:

func InitializeHLClientProvider() drivers.HLClientProvider {
	configFilePath := NewConfigFilePath()
	hlClientProvider := MakeHLClientProvider(configFilePath)
	return hlClientProvider
}

func InitializeHLIdentityService() drivers.HLIdentityService {
	client := InitializeHLClient()
	hlIdentityService := drivers.MakeHLIdentityService(client)
	return hlIdentityService
}

func InitializeHLGatewayInitializer() drivers.HLGatewayInitializer {
	wallet := InitializeWallet()
	configFilePath := NewConfigFilePath()
	walletIdentity := NewWalletIdentity()
	hlIdentityService := InitializeHLIdentityService()
	mspId := NewMspId()
	hlGatewayInitializer := drivers.MakeHLGatewayInitializer(wallet, configFilePath, walletIdentity, hlIdentityService, mspId)
	return hlGatewayInitializer
}

func InitializeGraphContractSignature() services.GraphContractSignature {
	publicKey := InitializePublicKey()
	privateKey := InitializePrivateKey()
	graphContractSignature := services.MakeGraphContractSignature(publicKey, privateKey)
	return graphContractSignature
}

func InitializeMaterialContract() services.MaterialContract {
	hlGatewayInitializer := InitializeHLGatewayInitializer()
	channelName := InitializeChannelName()
	contractName := InitializeContractName()
	smartContractDriverHL := drivers.MakeSmartContractDriverHL(hlGatewayInitializer, channelName, contractName)
	graphContractSignature := InitializeGraphContractSignature()
	publicKey := InitializePublicKey()
	materialContract := services.MakeMaterialContract(smartContractDriverHL, graphContractSignature, publicKey)
	return materialContract
}

func InitializeMaterialRepositorySql() repositories.MaterialRepositorySql {
	db := InitializeSqlDriver()
	materialRepositorySql := repositories.MakeMaterialRepositorySql(db)
	return materialRepositorySql
}

func InitializeMaterialContractController() controllers.MaterialContractController {
	materialContract := InitializeMaterialContract()
	materialRepositorySql := InitializeMaterialRepositorySql()
	materialContractController := controllers.MakeMaterialContractController(materialContract, materialRepositorySql)
	return materialContractController
}

// wire.go:

type Config struct {
	WalletPath       string `yaml:"WalletPath"`
	HLConfigPath     string `yaml:"HLConfigPath"`
	HLWalletIdentity string `yaml:"HLWalletIdentity"`
	PublicKeyPath    string `yaml:"PublicKeyPath"`
	PrivateKeyPath   string `yaml:"PrivateKeyPath"`
	ChannelName      string `yaml:"ChannelName"`
	ContractName     string `yaml:"ContractName"`
	OrgMspId         string `yaml:"OrgMspId"`
	DbUser           string `yaml:"DbUser"`
	DbName           string `yaml:"DbName"`
	DbPassword       string `yaml:"DbPassword"`
	DbHost           string `yaml:"DbHost"`
	DbPort           string `yaml:"DbPort"`
	DbSslmode        string `yaml:"DbSslmode"`
}

func InitConfig() Config {
	configYaml, err := os.ReadFile("config.yaml")
	if err != nil {
		panic(fmt.Sprintf("Could not read config.yaml file %s", err.Error()))
	}

	var config Config
	err = yaml.Unmarshal(configYaml, &config)
	if err != nil {
		panic(fmt.Sprintf("Could not parse yaml file %s", err.Error()))
	}

	return config
}

func InitializeWallet() *gateway.Wallet {
	config := InitConfig()
	wallet, err := gateway.NewFileSystemWallet(config.WalletPath)
	if err != nil {
		panic(fmt.Sprintf("Could not create wallet %s", err.Error()))
	}
	return wallet
}

func NewConfigFilePath() drivers.ConfigFilePath {
	config := InitConfig()
	return drivers.ConfigFilePath(config.HLConfigPath)
}

func NewWalletIdentity() drivers.WalletIdentity {
	config := InitConfig()
	return drivers.WalletIdentity(config.HLWalletIdentity)
}

func MakeHLClientProvider(
	iConfigFilePath drivers.ConfigFilePath,
) drivers.HLClientProvider {
	provider, err := drivers.MakeHLChannelProvider(iConfigFilePath)
	if err != nil {
		panic(fmt.Sprintf("Could not initialize HL client provider %s", err.Error()))
	}

	return provider
}

func InitializeHLClient() *msp.Client {

	return nil
}

func NewMspId() drivers.MspId {
	config := InitConfig()
	return drivers.MspId(config.OrgMspId)
}

func InitializePublicKey() services.PublicKey {
	config := InitConfig()
	data, err := os.ReadFile(config.PublicKeyPath)
	if err != nil {
		panic(err.Error())
	}

	return services.PublicKey(string(data))
}

func InitializePrivateKey() services.PrivateKey {
	config := InitConfig()
	data, err := os.ReadFile(config.PrivateKeyPath)
	if err != nil {
		panic(err.Error())
	}

	return services.PrivateKey(string(data))
}

func InitializeChannelName() drivers.ChannelName {
	config := InitConfig()
	return drivers.ChannelName(config.ChannelName)
}

func InitializeContractName() drivers.ContractName {
	config := InitConfig()
	return drivers.ContractName(config.ContractName)
}

var Set = wire.NewSet(drivers.MakeSmartContractDriverHL, wire.Bind(new(drivers.SmartContractDriverI), new(drivers.SmartContractDriverHL)), InitializeHLGatewayInitializer,
	InitializeChannelName,
	InitializeContractName,
	InitializeSqlDriver,
	InitializeMaterialRepositorySql, wire.Bind(new(repositories.MaterialRepositoryI), new(repositories.MaterialRepositorySql)),
)

func InitializeSqlDriver() *sql.DB {
	config := InitConfig()
	connStr := ""
	connStr += " user=" + config.DbUser
	connStr += " dbname=" + config.DbName
	connStr += " password=" + config.DbPassword
	connStr += " host=" + config.DbHost
	connStr += " sslmode=" + config.DbSslmode
	db, err := sql.Open("postgres", connStr)
	if err != nil {
		panic("could not connect to database")
	}
	return db
}
